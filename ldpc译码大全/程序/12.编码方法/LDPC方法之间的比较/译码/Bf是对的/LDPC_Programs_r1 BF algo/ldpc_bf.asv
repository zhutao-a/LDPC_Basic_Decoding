%function [syn ,u]=ldpc_bf(H,re,max_ite)        % actual function

% Code for LDPC Weighted Bit Flipping Algorithm (WBF)
% by Jinoe Morcilla Gavan
% Rev 1 June 7, 2007
% Based on the book Error Correcting Codes by LShu&DCostello

% output
%   u - decoded message
%   ite - number of iteration

% input
%   H - parity check matrix
%   re - received word
%   max_ite - maximum iteration

tic             % start timer
%%%rayleighchan
%%%%%%%%%% Step 1.  Generate the syndrome bits %%%%%%%%%%
max_ite=50;
% Code to test codes for LDPC
% by Jinoe Morcilla Gavan=
% Rev 1 June 10, 2007
[xyuan,Ha,s]=generate_h()
        u = s;

        %%%%%%%% Encode Message %%%%%%%%
       % [cw]=ldpc_encode(Go,u);
       [cw]=xyuan;
         
        % BPSK modulation from Igor, another BPSK by Arun's
        % "1" --> -1     "0" --> -1
       % cw_bpsk = 2*cw-1;
for i=1:length(cw)
    if cw(1,i)>0
        cw_bpsk(1,i) =-1;
    else
        cw_bpsk(1,i) =1;
    end
end
SNR=[1 1.5 2 2.5 3 3.5 4 4.5 5 5.5 6 6.5 7 7.5 8]
for a=1:15
re=awgn(cw_bpsk,SNR(a),'measured');
% initialize Matrix and Variable

max_ite=50;
[row,col] = size(Ha);

hard=[ ];

iteration = 0;

for i = 1:col
    if re(i) > 0.0
        hard(i) = 0;
    else
        hard(i) = 1; %#ok<AGROW>
    end % if
end % for

y_re = hard;
syn = mod(y_re*Ha',2)           % syndrome bits

while (iteration <50)  %check if syn=0 or max iteration is reached

    iteration = iteration + 1
    %%%%%%%%%% Step 2.  Compute for S, bit node checks %%%%%%%%%%
	S=zeros(1,1);
	for i = 1:col
		S(i) = syn*Ha(:,i);
	end % for i
   
    %%%%%%%%%% Step 3:  Store the bits to be flipped %%%%%%%%%%
    [srow,scol]=size(S);
    
	bflip=[ 1 ];
	flip_count=1;

	for i = 1:scol-1
		if S(i+1)>S(bflip)
			bflip(flip_count)=i+1;
			flip_count=flip_count+1;
		end % if S
	end % for i

	if S(1) == S(bflip(1))
		bflip(flip_count)=1;
	end % if S
    
    %%%%%%%%%% Step 4:  Flip the bits %%%%%%%%%%
    y_re(bflip)=not(y_re(bflip));
    syn = mod(y_re*Ha',2);  % get/recompute syndrome bits    
   
end % while
    u = y_re;
    sss(a)=biterr(cw,u,'overall')
% return resulting values
end
   semilogy(SNR,sss/756,'r-');
toc             % end timer